function [S] = SPM_Experiment(MODE,Exp_M,dt)
%{
\--- MODE  >>> String (Deffault / Excel) to switch between operation modes

\--- Exp_M >>> Experiment string

             \-- IF "Deffault"  >>> String Array at different CC/CV rates until defined Voltage/Time constraints. The following syntax refer to experiment set options

                    \- Charge at "X" (V or A) until (voltage, time or current) reach "Y" (volts, amperes or seconds)
                    \- Discharge at "X" (V or A) until (voltage, time or current) reach "Y" (volts, amperes or seconds)
                    \- Rest until time reach Y seconds

                        \- NOTE: repmat("STRING",1,n) could be used to repeat the experiment string sequence "n" times

             \-- IF "Excel" >>> Built Current dataset according to a two columns Excel file (1st Column: Experiment time [s] ; 2nd Column: Current [A])

\---  dt  >>> Defines differential to generate time vector in deffault operation mode

\---  S   >>> 

%}

%TO DO LIST:
 %-- Main loop else condition missing
 %-- Exeriment voltage stop conditions for Charge/discharge/rest experiments missing, DEFINE
 %-- Define CC/CV conditions
 %-- Develop Excel read mode t,App_Curr
 %-- C_rate and mA condition implement
 %-- add switching Units condition (seconds,voltage)
 %-- Add (hours,mV...) condition
tic

%INITIALIZE CELLS
EXP_t_Steps={};
EXP_Array_Steps={};
EXP_Type_Steps={};


%EXPERIMENT  APP_CURRENT CELL GENERATION CONDITIONS

    if MODE=="Deffault"

        for i=1:length(Exp_M)
            


            % CHARGE Applied Current vector generation condition

            if strfind(Exp_M(i),"Charge")==1
                if strfind(Exp_M(i),'A')>0
                    

                    %--Stop time condition
                    if strfind(Exp_M(i),"until time reach")>0
    
                        Step_input_data=str2double(regexp(Exp_M(i),'(?<!\d)(\d)+(?!\d)','match'));    % - Extract the number from each step
                        Step_Time_Vector=0:dt:Step_input_data(2);                                       % - Generates Time Vector
                        Step_Current_Vector=-Step_input_data(1)*ones(Step_input_data(2),1);            % - Generates Current Vector
                        
                        EXP_t_Steps=[EXP_t_Steps;Step_Time_Vector];                                                       % - Concatenate  time in cell struct
                        EXP_Array_Steps=[EXP_Array_Steps;Step_Current_Vector];                                            % - Concatenate current in cell struct
                        EXP_Type_Steps=[EXP_Type_Steps;'Discrete defined Time and Current for experiment'];               % - Concatenate type in cell struct
                    

                    %--Stop voltage condition
                    elseif strfind(Exp_M(i),"until voltage reach")>0
                      
                        EXP_t_Steps=[EXP_t_Steps;0];                                                     % - Concatenate empty time array
                        EXP_Array_Steps=[EXP_Array_Steps;2];                                             % - Concatenate current in cell struct   
                        EXP_Type_Steps=[EXP_Type_Steps;"Voltage limit constraint"];                      % - Concatenate type in cell struct

                    else
    
                        fprintf(['[WARNING]: Error in experiment step: ']) 
                        fprintf('%i',i)
                        fprintf(['. Please, check syntax.\n\n']) 
    
                    end
                
                elseif strfind(Exp_M(i),"mA")>0
                    %--mili-Amperes condition

                elseif strfind(Exp_M(i),"C")>0
                    %--C-rate condition
                else
                        fprintf(['[WARNING]: Error in experiment step: ']) 
                        fprintf('%i',i)
                        fprintf(['. Please, check syntax.\n\n'])                     
                end



            % DISCHARGE Applied Current vector generation condition

            elseif strfind(Exp_M(i),"Discharge")==1
                if strfind(Exp_M(i),"A")>0
                   

                    %--Stop time condition
                    if strfind(Exp_M(i),"until time reach")>0
                   
                        Step_input_data=str2double(regexp(Exp_M(i),'(?<!\d)(\d)+(?!\d)','match'));    % - Extract the number from each step
                        Step_Time_Vector=0:dt:Step_input_data(2);                                       % - Generates Time Vector
                        Step_Current_Vector=-Step_input_data(1)*ones(Step_input_data(2),1);            % - Generates Current Vector

                        EXP_t_Steps=[EXP_t_Steps;Step_Time_Vector];                                                       % - Concatenate  time in cell struct
                        EXP_Array_Steps=[EXP_Array_Steps;Step_Current_Vector];                                            % - Concatenate current in cell struct
                        EXP_Type_Steps=[EXP_Type_Steps;'Discrete defined Time and Current for experiment'];               % - Concatenate type in cell struct
                    

                    %--Stop voltage condition
                    elseif strfind(Exp_M(i),'until voltage reach')>0

                        EXP_t_Steps=[EXP_t_Steps;0];                                                     % - Concatenate empty time array
                        EXP_Array_Steps=[EXP_Array_Steps;2];                                             % - Concatenate current in cell struct   
                        EXP_Type_Steps=[EXP_Type_Steps;'Voltage limit constraint'];                      % - Concatenate type in cell struct
                    else
    
                        fprintf(['[WARNING]: Error in experiment step: ']) 
                        fprintf('%i',i)
                        fprintf(['. Please, check syntax.\n\n']) 
                    
                    end
                

                elseif strfind(Exp_M(i),'mA')>0
                    %--mili-Amperes condition

                elseif strfind(Exp_M(i),'C')>0
                    %--C-rate condition
                else
                        fprintf(['[WARNING]: Error in experiment step: ']) 
                        fprintf('%i',i)
                        fprintf(['. Please, check syntax.\n\n']) 
                end



            % REST Applied Current vector generation condition   

            elseif strfind(Exp_M(i),'Rest')==1
                if (isempty(strfind(Exp_M(i),'until time reach')>0) || isempty(strfind(Exp_M(i),'seconds')>0))
                
                    fprintf(['[WARNING]: Error in experiment step: ']) 
                    fprintf('%i',i)
                    fprintf(['. Please, check syntax.\n\n']) 
                
                else
                    Step_input_data=str2double(regexp(Exp_M(i),'(?<!\d)(\d)+(?!\d)','match'));    % - Extract the number from each step
                    Step_Time_Vector=0:dt:Step_input_data;                                       % - Generates Time Vector
                    Step_Current_Vector=zeros(Step_input_data,1);                                % - Generates Current Vector
                    
                    EXP_t_Steps=[EXP_t_Steps;Step_Time_Vector];                                                       % - Concatenate time in cell struct
                    EXP_Array_Steps=[EXP_Array_Steps;Step_Current_Vector];                                            % - Concatenate current in cell struct
                    EXP_Type_Steps=[EXP_Type_Steps;'Discrete defined Time and Current for experiment'];               % - Concatenate type in cell struct

                end

            else
                fprintf(['[WARNING]: Error in experiment step: ']) 
                fprintf('%i',i)
                fprintf(['. Please, check syntax.\n\n'])
            end
        end
        
        S.Array = struct('Exp_Time',EXP_t_Steps,'Exp_Array',EXP_Array_Steps,'Exp_Data_Type',EXP_Type_Steps);
        S.Mode=1; %-Mode: Deffault Flag
        fprintf(['[COMMENT]: Deffault experiment set succesfully\n'])




    elseif MODE=="Excel"
        %xlsread("Experiment\EXCEL_Experiment_UPLOAD_example.xlsx")
        MOD=2; %-Mode Excel Flag




    else
        fprintf(['[WARNING]: Typing error in general function. Please, check syntax.\n\n'])        
    end

toc
fprintf(['\n\n']) 

end